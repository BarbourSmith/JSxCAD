md`# Implicit Functions`;

const bubbleFn = ([x, y, z]) => {
  const r = x * x + y * y + z * z;
  if (0.5 < r && r < 1) {
    return 1;
  } else {
    return -1;
  }
};

const bubble = Implicit(bubbleFn, {
  radius: 3,
  angularBound: 10,
  distanceBound: 0.1,
  radiusBound: 0.1,
})
  .view()
  .md('bubble');

const bubbleSection = bubble.section().view().md('bubble section');

const sphereFn = ([x, y, z]) => {
  const r = x * x + y * y + z * z;
  if (0 < r && r < 1) {
    return 1;
  } else {
    return -1;
  }
};

const sphere = Implicit(sphereFn, {
  radius: 2,
  angularBound: 10,
  distanceBound: 0.1,
  radiusBound: 0.1,
})
  .view()
  .md('sphere');

const sphereSection = sphere.section().view().md('sphere section');

const cubeFn = ([x, y, z]) => {
  return Math.max(Math.abs(x), Math.abs(y), Math.abs(z)) - 1;
};

const cube = Implicit(cubeFn, {
  radius: 2,
})
  .view()
  .md('cube');

const cylinderFn = ([x, y, z]) => {
  const r = x * x + y * y;
  if (0 < r && r < 0.5 && -1.5 < z && z < 1.5) {
    return 1;
  } else {
    return -1;
  }
};

const cylinder = Implicit(cylinderFn, {
  radius: 2,
})
  .view()
  .md('cylinder');

const ellipsoidFn = ([x, y, z]) => x * x + 2 * y * y + 4 * z * z - 1;

const ellipsoid = Implicit(ellipsoidFn, {
  radius: 2,
  angularBound: 2,
  distanceBound: 2,
})
  .view()
  .md('ellipsoid');

const torusFn = ([x, y, z]) => {
  const x2 = x * x,
    y2 = y * y,
    z2 = z * z;
  const x4 = x2 * x2,
    y4 = y2 * y2,
    z4 = z2 * z2;
  return (
    x4 +
    y4 +
    z4 +
    2 * x2 * y2 +
    2 * x2 * z2 +
    2 * y2 * z2 -
    5 * x2 +
    4 * y2 -
    5 * z2 +
    4
  );
};

const torus = Implicit(torusFn, { radius: 2 }).view().md('torus');

const chairFn = ([x, y, z]) => {
  const x2 = x * x,
    y2 = y * y,
    z2 = z * z;
  const x4 = x2 * x2,
    y4 = y2 * y2,
    z4 = z2 * z2;
  return (
    x4 -
    1.2 * x2 * y2 +
    3.6 * x2 * z2 -
    7.5 * x2 +
    y4 +
    3.6 * y2 * z2 -
    7.5 * y2 +
    0.2 * z4 -
    7.5 * z2 +
    64.0625 -
    16.0 * z * y2 +
    16.0 * x2 * z
  );
};

const chair = Implicit(chairFn, { radius: 7 }).view().md('chair');

const tangleCubeFn = ([x, y, z]) => {
  const x2 = x * x,
    y2 = y * y,
    z2 = z * z;
  const x4 = x2 * x2,
    y4 = y2 * y2,
    z4 = z2 * z2;
  return x4 - 5 * x2 + y4 - 5 * y2 + z4 - 5 * z2 + 11.8;
};

const tangleCube = Implicit(tangleCubeFn, { radius: 5 })
  .view()
  .md('tangle cube');

const octicSurfaceFn = ([x, y, z]) => {
  const x2 = x * x,
    y2 = y * y,
    z2 = z * z;
  const x4 = x2 * x2,
    y4 = y2 * y2,
    z4 = z2 * z2;
  const x6 = x4 * x2,
    y6 = y4 * y2,
    z6 = z4 * z2;
  const x8 = x4 * x4,
    y8 = y4 * y4,
    z8 = z4 * z4;
  return (
    43.30495169 * x2 * y2 +
    43.30495169 * x2 * z2 +
    43.30495169 * y2 * z2 +
    44.3606798 * x6 * y2 +
    44.3606798 * x6 * z2 +
    66.5410197 * x4 * y4 +
    66.5410197 * x4 * z4 +
    44.3606798 * x2 * y6 -
    11.70820393 * x2 -
    11.70820393 * y2 -
    11.70820393 * z2 +
    37.65247585 * x4 +
    37.65247585 * y4 +
    37.65247585 * z4 +
    11.09016995 * x8 +
    11.09016995 * y8 +
    11.09016995 * z8 +
    133.0820394 * x2 * y4 * z2 +
    133.0820394 * x2 * y2 * z4 +
    44.3606798 * x2 * z6 +
    44.3606798 * y6 * z2 +
    66.5410197 * y4 * z4 +
    44.3606798 * y2 * z6 +
    133.0820394 * x4 * y2 * z2 -
    91.95742756 * x4 * y2 -
    91.95742756 * x4 * z2 -
    91.95742756 * x2 * y4 -
    91.95742756 * x2 * z4 -
    91.95742756 * y4 * z2 -
    183.9148551 * x2 * y2 * z2 -
    30.65247585 * x6 -
    30.65247585 * y6 -
    91.95742756 * y2 * z4 -
    30.65247585 * z6 +
    1.618033988
  );
};

const bathsOcticSurface = Implicit(octicSurfaceFn, { radius: 5 })
  .view()
  .md("Bath's Octic Surface");

const heartFn = ([x, y, z]) =>
  (2 * x * x + y * y + z * z - 1) *
    (2 * x * x + y * y + z * z - 1) *
    (2 * x * x + y * y + z * z - 1) -
  (0.1 * x * x + y * y) * z * z * z;

const heart = Implicit(heartFn, { radius: 3 }).view().md('heart');

const ringFn = ([x, y, z]) => {
  const e = 0.1;
  let f1 = x * x + y * y + z * z - 1;
  let f2 = x;
  f1 = f1 * f1 - e * e;
  f2 = f2 * f2 - e * e;
  if (f1 < 0 && f2 < 0) return -1;
  else if (f1 > 0 || f2 > 0) return 1;
  else return 0;
};

const ring = Implicit(ringFn, { radius: 2, radiusBound: 0.05 })
  .view()
  .md('ring');
