import { initOcct } from './occt.js';
import { offset } from './offset.js';
import test from 'ava';

test.beforeEach(async (t) => {
  await initOcct();
});

const triangle = [
  [1, 0, 0],
  [-0.5, 0.86603, 0],
  [-0.5, -0.86603, 0],
];

test('Triangle', (t) => {
  const a = offset([triangle], 0);
  t.deepEqual(a, [triangle]);

  const b = offset([triangle], 0.1);
  t.deepEqual(b, [
    [
      [-0.6000000000000008, 1.0392355403787492, 0],
      [1.1999992039168654, 8.326672684688674e-17, 0],
      [-0.6, -1.0392355403787485, 0],
    ],
  ]);

  // The triangle has disappeared.
  const c = offset([triangle], -2);
  t.deepEqual(c, []);
});

const tie = [
  [-2.8, -5, 0],
  [2.5, -1.8, 0],
  [7.8, -5, 0],
  [7.8, 1.2, 0],
  [7.8, 5, 0],
  [2.5, 1.8, 0],
  [-2.8, 5, 0],
];

test('Tie', (t) => {
  const a = offset([tie], 0);
  t.deepEqual(a, [tie]);

  // The tie is still joined.
  const b = offset([tie], -1);
  t.deepEqual(b, [
    [
      [-1.7999999999999987, -3.2280900609687455, 0],
      [2.5000000000000004, -0.6318636458744056, 0],
      [6.8000000000000025, -3.228090060968748, 0],
      [6.800000000000001, 1.2000000000000002, 0],
      [6.800000000000001, 3.2280900609687464, 0],
      [2.5, 0.6318636458744056, 0],
      [-1.8000000000000005, 3.2280900609687473, 0],
    ],
  ]);

  // The tie splits apart.
  const c = offset([tie], -2);
  t.deepEqual(c, [
    [
      [-0.7999999999999989, -1.4561801219374924, 0],
      [1.6117983269589726, 0, 0],
      [-0.7999999999999989, 1.456180121937493, 0],
    ],
    [
      [5.800000000000001, -1.4561801219374932, 0],
      [5.800000000000001, 1.2000000000000002, 0],
      [5.800000000000001, 1.4561801219374924, 0],
      [3.3882016730410265, 0, 0],
    ],
  ]);
});
