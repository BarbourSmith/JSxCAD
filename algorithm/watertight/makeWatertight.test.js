import { isWatertightPolygons } from './isWatertightPolygons.js';
import { makeWatertight } from './makeWatertight.js';
import test from 'ava';

test('Makes box1-union-box4 test case watertight.', (t) => {
  const v1Output = [
    [
      [-5, -5, -5],
      [-5, -5, 5],
      [-5, 5, 5],
      [-5, 5, -5],
    ], // -5,5,-5 (not this one)
    [
      [-5, -5, -5],
      [5, -5, -5],
      [5, -5, 5],
      [-5, -5, 5],
    ],
    [
      [-5, -5, -5],
      [-5, 5, -5],
      [5, 5, -5],
      [5, -5, -5],
    ], // -5,5,-5 (this one)
    [
      [5, -5, -5],
      [5, 0, -5],
      [5, 0, 5],
      [5, -5, 5],
    ],
    [
      [-5, 5, -5],
      [-5, 5, 5],
      [0, 5, 5],
      [0, 5, -5],
    ], // -5,5,-5
    [
      [-5, -5, 5],
      [0, -5, 5],
      [0, 5, 5],
      [-5, 5, 5],
    ],
    [
      [5, 0, -5],
      [5, 5, -5],
      [5, 5, 0],
      [5, 0, 0],
    ],
    [
      [5, 5, 0],
      [5, 5, -5],
      [0, 5, -5],
      [0, 5, 0],
    ],
    [
      [0, -5, 5],
      [5, -5, 5],
      [5, 0, 5],
      [0, 0, 5],
    ],
    [
      [10, 0, 0],
      [10, 10, 0],
      [10, 10, 10],
      [10, 0, 10],
    ],
    [
      [0, 10, 0],
      [0, 10, 10],
      [10, 10, 10],
      [10, 10, 0],
    ],
    [
      [0, 0, 10],
      [10, 0, 10],
      [10, 10, 10],
      [0, 10, 10],
    ],
    [
      [0, 5, 10],
      [0, 10, 10],
      [0, 10, 0],
      [0, 5, 0],
    ],
    [
      [5, 0, 0],
      [10, 0, 0],
      [10, 0, 10],
      [5, 0, 10],
    ],
    [
      [5, 10, 0],
      [10, 10, 0],
      [10, 0, 0],
      [5, 0, 0],
    ],
    [
      [0, 0, 5],
      [0, 0, 10],
      [0, 5, 10],
      [0, 5, 5],
    ],
    [
      [5, 0, 5],
      [5, 0, 10],
      [0, 0, 10],
      [0, 0, 5],
    ],
    [
      [0, 5, 0],
      [0, 10, 0],
      [5, 10, 0],
      [5, 5, 0],
    ],
  ];

  const fixed = makeWatertight(v1Output);
  const cleaned = fixed.map((polygon) => polygon.map((v) => [...v]));

  t.true(isWatertightPolygons(cleaned));

  t.deepEqual(cleaned, [
    [
      [-5, -5, -5],
      [-5, -5, 5],
      [-5, 5, 5],
      [-5, 5, -5],
    ],
    [
      [-5, -5, -5],
      [5, -5, -5],
      [5, -5, 5],
      [0, -5, 5],
      [-5, -5, 5],
    ],
    [
      [-5, -5, -5],
      [-5, 5, -5],
      [0, 5, -5],
      [5, 5, -5],
      [5, 0, -5],
      [5, -5, -5],
    ],
    [
      [5, -5, -5],
      [5, 0, -5],
      [5, 0, 0],
      [5, 0, 5],
      [5, -5, 5],
    ],
    [
      [-5, 5, -5],
      [-5, 5, 5],
      [0, 5, 5],
      [0, 5, 0],
      [0, 5, -5],
    ],
    [
      [-5, -5, 5],
      [0, -5, 5],
      [0, 0, 5],
      [0, 5, 5],
      [-5, 5, 5],
    ],
    [
      [5, 0, -5],
      [5, 5, -5],
      [5, 5, 0],
      [5, 0, 0],
    ],
    [
      [5, 5, 0],
      [5, 5, -5],
      [0, 5, -5],
      [0, 5, 0],
    ],
    [
      [0, -5, 5],
      [5, -5, 5],
      [5, 0, 5],
      [0, 0, 5],
    ],
    [
      [10, 0, 0],
      [10, 10, 0],
      [10, 10, 10],
      [10, 0, 10],
    ],
    [
      [5, 10, 0],
      [0, 10, 0],
      [0, 10, 10],
      [10, 10, 10],
      [10, 10, 0],
    ],
    [
      [0, 5, 10],
      [0, 0, 10],
      [5, 0, 10],
      [10, 0, 10],
      [10, 10, 10],
      [0, 10, 10],
    ],
    [
      [0, 5, 5],
      [0, 5, 10],
      [0, 10, 10],
      [0, 10, 0],
      [0, 5, 0],
    ],
    [
      [5, 0, 5],
      [5, 0, 0],
      [10, 0, 0],
      [10, 0, 10],
      [5, 0, 10],
    ],
    [
      [5, 5, 0],
      [5, 10, 0],
      [10, 10, 0],
      [10, 0, 0],
      [5, 0, 0],
    ],
    [
      [0, 0, 5],
      [0, 0, 10],
      [0, 5, 10],
      [0, 5, 5],
    ],
    [
      [5, 0, 5],
      [5, 0, 10],
      [0, 0, 10],
      [0, 0, 5],
    ],
    [
      [0, 5, 0],
      [0, 10, 0],
      [5, 10, 0],
      [5, 5, 0],
    ],
  ]);
});
