// https://observablehq.com/@pentacular/jsxcad-threads@333
import define1 from "/@pentacular/jsxcad-shapes.js?v=3";
import define2 from "/@jashkenas/inputs.js?v=3";

export default function define(runtime, observer) {
  const main = runtime.module();
  main.variable(observer()).define(["md"], function(md){return(
md`# JSxCAD Threads`
)});
  main.variable(observer()).define(["md"], function(md){return(
md`## Metric Threads`
)});
  main.variable(observer()).define(["md"], function(md){return(
md`![Metric Thread](https://upload.wikimedia.org/wikipedia/commons/9/99/ISO-metric-thread.svg)`
)});
  main.variable(observer("toHeightFromPitch")).define("toHeightFromPitch", function(){return(
(pitch) => pitch * 0.866
)});
  main.variable(observer("Tooth")).define("Tooth", ["toHeightFromPitch","Line2","Path"], function(toHeightFromPitch,Line2,Path){return(
(pitch = 1) => {
  const height = toHeightFromPitch(pitch);
  const baseLeft = [pitch / -2, 0];
  const peak = [0, height];
  const baseRight = [pitch / 2, 0];
  const leftEdge = Line2.ofPoints([pitch / -2, 0], [pitch / -2, height]);
  const rightEdge = Line2.ofPoints([pitch / 2, 0], [pitch / 2, height]);
  const leftSlope = Line2.ofPoints(baseLeft, peak);
  const rightSlope = Line2.ofPoints(baseRight, peak);
  const topEdge = Line2.ofPoints([-pitch, height * 7/8], [pitch, height * 7/8]);
  const bottomEdge = Line2.ofPoints([-pitch, height * 2/8], [pitch, height * 2/8]);
  const baseEdge = Line2.ofPoints([-pitch, 0], [pitch, 0]);
  const profile = [
    Line2.meet(rightEdge, baseEdge),
    Line2.meet(rightEdge, bottomEdge),
    Line2.meet(bottomEdge, rightSlope),
    Line2.meet(topEdge, rightSlope),
    Line2.meet(topEdge, leftSlope),
    Line2.meet(bottomEdge, leftSlope),
    Line2.meet(leftEdge, bottomEdge),
    Line2.meet(leftEdge, baseEdge),
  ];
  return Path(...profile).close().interior();
}
)});
  main.variable(observer("Thread")).define("Thread", ["Loop","Tooth","toHeightFromPitch"], function(Loop,Tooth,toHeightFromPitch){return(
(diameter, length, pitch) =>
  Loop(Tooth(pitch).moveY(diameter / 2 - toHeightFromPitch(pitch) * 2/8),
       360 * length / pitch,
       { pitch })
    .moveX(length / -2)
    .rotateY(-90)
)});
  main.variable(observer()).define(["md"], function(md){return(
md`Note that the thread diameter is to the D1 line in the above diagram, thus the tooth profile is inset by 2/8 pitch.`
)});
  main.variable(observer("ThreadedRod")).define("ThreadedRod", ["Thread","Cylinder","toHeightFromPitch","Connector"], function(Thread,Cylinder,toHeightFromPitch,Connector){return(
(diameter, height, pitch) =>
  Thread(diameter, height, pitch)
    .add(Cylinder.ofDiameter(diameter - toHeightFromPitch(pitch) * 5/8 * 2, height))
    .with(Connector('top').moveZ(height / 2),
          Connector('bottom').moveZ(height / -2).flip())
    .Item(`${diameter}x${height} Threaded Rod`)
)});
  main.variable(observer()).define(["md"], function(md){return(
md`# Example`
)});
  main.variable(observer("viewof examplePitch")).define("viewof examplePitch", ["slider"], function(slider){return(
slider({
  min: 0.1,
  max: 6,
  value: 2,
  precision: 1,
  submit: true,
  description: "Pitch for Examples"
})
)});
  main.variable(observer("examplePitch")).define("examplePitch", ["Generators", "viewof examplePitch"], (G, _) => G.input(_));
  main.variable(observer()).define(["md","examplePitch"], function(md,examplePitch){return(
md`## An example tooth profile for a pitch of ${examplePitch}.`
)});
  main.variable(observer()).define(["Tooth","examplePitch"], function(Tooth,examplePitch){return(
Tooth(examplePitch).color('gray').withOutline().scale(10).center().topView()
)});
  main.variable(observer()).define(["md","examplePitch"], function(md,examplePitch){return(
md`## An example threaded rod with a pitch of ${examplePitch}.`
)});
  main.variable(observer("Example")).define("Example", ["Cylinder","ThreadedRod","examplePitch"], function(Cylinder,ThreadedRod,examplePitch){return(
Cylinder.ofDiameter(6, 3)
    .on(ThreadedRod(6, 20, examplePitch))
    .on(Cylinder.ofDiameter(6, 3))
)});
  main.variable(observer()).define(["Example"], function(Example){return(
Example.material('steel').center().scale(2).orbitView()
)});
  main.variable(observer()).define(["writeStl","Example","downloadAsZip"], async function(writeStl,Example,downloadAsZip)
{
  await writeStl(Example.Page({ itemPerPage: 1 }), 'example');
  return downloadAsZip('thread');
}
);
  main.variable(observer()).define(["md"], function(md){return(
md`# Todo

* Check the relationship of the nominal radius to the thread profile.
* Consider imperial measures.`
)});
  main.variable(observer()).define(["md"], function(md){return(
md`# Appendix`
)});
  const child1 = runtime.module(define1);
  main.import("Circle", child1);
  main.import("Connector", child1);
  main.import("Cube", child1);
  main.import("Cylinder", child1);
  main.import("Line2", child1);
  main.import("Loop", child1);
  main.import("Path", child1);
  main.import("Square", child1);
  main.import("Triangle", child1);
  main.import("X", child1);
  main.import("Y", child1);
  main.import("Z", child1);
  main.import("downloadAsZip", child1);
  main.import("writeStl", child1);
  const child2 = runtime.module(define2);
  main.import("slider", child2);
  return main;
}
