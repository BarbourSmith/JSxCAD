import { canonicalize, transform } from '@jsxcad/geometry-polygons';

import { degToRad } from '@jsxcad/math-utils';
import { difference } from './difference';
import { fromZRotation } from '@jsxcad/math-mat4';
// import polygonClipping from 'polygon-clipping';
import test from 'ava';

// FIX: Check multipolygon construction against example/v1/squares*.js

const squares = [[[-0.5, -0.5, 0], [0.5, -0.5, 0], [0.5, 0.5, 0], [-0.5, 0.5, 0]],
                 [[1.5, -0.5, 0], [2, -0.5, 0], [2, 0.5, 0], [1.5, 0.5, 0]]];

const rectangle = [[[0, 0, 0], [2, 0, 0], [2, 1, 0], [0, 1, 0]]];

test('difference: Difference of one geometry produces that geometry', t => {
  t.deepEqual(difference(rectangle), rectangle);
});

test('difference: Difference of rectangle with itself produces an empty geometry', t => {
  t.deepEqual(difference(rectangle, rectangle), []);
});

test('difference: Difference of rectangle with itself rotated 90 degrees produces rectangle', t => {
  t.deepEqual(difference(rectangle, transform(fromZRotation(degToRad(90)), rectangle)),
              rectangle);
});

test('difference: Difference of rectangle with itself rotated -45 degrees produces shape', t => {
  t.deepEqual(canonicalize(difference(rectangle, transform(fromZRotation(degToRad(-45)), rectangle))),
              [[[0, 0, 0], [0.70711, 0.70711, 0], [1.41421, 0, 0], [2, 0, 0], [2, 1, 0], [0, 1, 0]]]);
});

test('difference: Difference of two non-overlapping squares and a rectangle', t => {
  t.deepEqual(canonicalize(difference(squares, rectangle)),
              [[[-0.5, -0.5, 0], [0.5, -0.5, 0], [0.5, 0, 0], [0, 0, 0], [0, 0.5, 0], [-0.5, 0.5, 0]]]);
});

test('difference: Handle empty geometries', t => {
  t.deepEqual(canonicalize(difference([], rectangle)), []);
  t.deepEqual(canonicalize(difference(rectangle, [])), rectangle);
  t.deepEqual(canonicalize(difference([], [])), []);
});

/*
test('Bad case', t => {
  const subjectGeom = [[[[-25, 3.061616997868383e-15], [-24.903926402016154, -0.9754516100806382], [-24.619397662556434, -1.9134171618254459], [-24.157348061512728, -2.777851165098008], [-23.535533905932738, -3.5355339059327346], [-22.77785116509801, -4.157348061512724], [-21.91341716182545, -4.619397662556431], [-20.97545161008064, -4.9039264020161495], [-20, -4.999999999999997], [-19.02454838991936, -4.9039264020161495], [-3.0865423622202206, -0.7956129244599208], [-3.1385128972903376, -0.6242890304516108], [-3.2, 3.9188697572715305e-16], [-3.1385128972903376, 0.6242890304516115], [-3.0865423622202206, 0.7956129244599224], [-19.02454838991936, 4.903926402016155], [-20, 5.000000000000003], [-20.97545161008064, 4.903926402016155], [-21.91341716182545, 4.619397662556436], [-22.77785116509801, 4.15734806151273], [-23.535533905932738, 3.5355339059327413], [-24.157348061512728, 2.777851165098014], [-24.619397662556434, 1.9134171618254552], [-24.903926402016154, 0.9754516100806466]]]];

  const clippingGeoms = [[[[[-20, 2.4492935982947065e-15], [-19.923141121612925, -0.7803612880645105], [-19.695518130045148, -1.530733729460357], [-19.325878449210183, -2.2222809320784065], [-18.82842712474619, -2.8284271247461876], [-18.22228093207841, -3.325878449210179], [-17.530733729460362, -3.695518130045145], [-16.780361288064512, -3.92314112161292], [-16, -3.9999999999999982], [-15.219638711935488, -3.92314112161292], [-3.08654236222022, -0.7956129244599214], [-3.1385128972903376, -0.6242890304516108], [-3.2, 3.9188697572715305e-16], [-3.1385128972903376, 0.6242890304516115], [-3.0865423622202193, 0.7956129244599219], [-15.219638711935488, 3.923141121612923], [-16, 4.000000000000002], [-16.780361288064512, 3.923141121612924], [-17.530733729460362, 3.6955181300451487], [-18.22228093207841, 3.325878449210184], [-18.82842712474619, 2.8284271247461934], [-19.325878449210183, 2.222280932078411], [-19.695518130045148, 1.5307337294603642], [-19.923141121612925, 0.7803612880645174]]]]];

  const result = polygonClipping.difference(subjectGeom, ...clippingGeoms);
  t.deepEqual(result, []);
});
*/

test("Bad case", t => {
  const baseZ0Surface = [[[8,2.4492935982947064e-16,0],[8.03842943919354,0.3901806440322572,0],[8.152240934977426,0.7653668647301798,0],[8.33706077539491,1.1111404660392044,0],[8.585786437626904,1.4142135623730951,0],[8.888859533960796,1.6629392246050907,0],[9.23463313526982,1.8477590650225735,0],[18.08658283817455,4.619397662556434,0],[19.02454838991936,4.903926402016152,0],[20,5,0],[20.97545161008064,4.903926402016152,0],[21.91341716182545,4.619397662556434,0],[22.77785116509801,4.157348061512726,0],[23.535533905932738,3.5355339059327373,0],[24.157348061512728,2.777851165098011,0],[24.619397662556434,1.913417161825449,0],[24.903926402016154,0.9754516100806412,0],[25,0,0],[24.90392640201615,-0.9754516100806436,0],[24.61939766255643,-1.913417161825452,0],[24.157348061512728,-2.777851165098011,0],[23.535533905932738,-3.5355339059327386,0],[22.77785116509801,-4.157348061512727,0],[21.91341716182545,-4.619397662556433,0],[20.97545161008064,-4.903926402016152,0],[20,-5,0],[19.024548389919357,-4.903926402016151,0],[18.08658283817455,-4.619397662556432,0],[9.234633135269819,-1.847759065022573,0],[8.888859533960796,-1.6629392246050905,0],[8.585786437626904,-1.414213562373095,0],[8.337060775394908,-1.111140466039204,0],[8.152240934977426,-0.7653668647301793,0],[8.03842943919354,-0.3901806440322567,0]]];
  const z0Surfaces = [[[[9,0,0],[8.827067523629074,1.7558128981451542,0],[8.31491579260158,3.444150891285808,0],[7.483226510722907,5.00013209717642,0],[6.3639610306789285,6.363961030678928,0],[5.0001320971764205,7.483226510722907,0],[3.4441508912858083,8.31491579260158,0],[1.755812898145155,8.827067523629074,0],[5.51091059616309e-16,9,0],[-1.7558128981451537,8.827067523629074,0],[-3.4441508912858074,8.31491579260158,0],[-5.000132097176418,7.483226510722908,0],[-6.363961030678928,6.3639610306789285,0],[-7.483226510722908,5.00013209717642,0],[-8.31491579260158,3.444150891285809,0],[-8.827067523629074,1.7558128981451575,0],[-9,1.102182119232618e-15,0],[-8.827067523629074,-1.7558128981451553,0],[-8.314915792601582,-3.444150891285807,0],[-7.4832265107229095,-5.000132097176418,0],[-6.363961030678929,-6.363961030678928,0],[-5.00013209717642,-7.483226510722907,0],[-3.444150891285813,-8.314915792601578,0],[-1.755812898145158,-8.827067523629072,0],[-1.6532731788489267e-15,-9,0],[1.7558128981451548,-8.827067523629074,0],[3.44415089128581,-8.31491579260158,0],[5.000132097176417,-7.4832265107229095,0],[6.363961030678926,-6.363961030678929,0],[7.483226510722907,-5.00013209717642,0],[8.314915792601578,-3.4441508912858136,0],[8.827067523629072,-1.7558128981451584,0]]]];
  const a = new Polygon();
  for (const polygon of baseZ0Surface) {
    a.addFace(polygon.map(([x, y]) => createPoint(x, y)));
  }
  const b = new Polygon();
  for (const surface of z0Surfaces) {
    for (const polygon of surface) {
      b.addFace(polygon.map(([x, y]) => createPoint(x, y)));
    }
  }
  const c = subtract(a, b);
  const result = [];
  for (const face of c.faces) {
    const polygon = [];
    for (const edge of face) {
      const start = edge.start;
      polygon.push([start.x, start.y, 0]);
    }
    result.push(polygon);
  }

  t.deepEqual(result, []);
});
