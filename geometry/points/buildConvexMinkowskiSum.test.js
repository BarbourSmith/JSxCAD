import { canonicalize as canonicalizePolygons, toPoints } from '@jsxcad/geometry-polygons';
import { unitCubePolygons, unitGeodesicSphere20Polygons } from '@jsxcad/data-shape';

import { buildConvexHull } from './buildConvexHull';
import { buildConvexMinkowskiSum } from './buildConvexMinkowskiSum';
import { canonicalize } from './canonicalize';
import { isWatertightPolygons } from '@jsxcad/algorithm-watertight';
import test from 'ava';

test('Minkowski sum of a cube and a sphere.', t => {
  const points = canonicalize(buildConvexMinkowskiSum({},
                                                      toPoints({}, unitCubePolygons),
                                                      toPoints({}, unitGeodesicSphere20Polygons)));
  const polygons = buildConvexHull({}, points);
  // All triangles.
  t.true(polygons.every(polygon => polygon.length === 3));
  // The right triangles.
  t.deepEqual(canonicalizePolygons(polygons),
              [[[-0.5, 1.02573, -1.35065], [0.5, 1.02573, -1.35065], [0.5, -1.02573, -1.35065]], [[-0.5, 1.02573, -1.35065], [0.5, -1.02573, -1.35065], [-0.5, -1.02573, -1.35065]], [[1.35065, 0.5, -1.02573], [1.35065, -0.5, -1.02573], [0.5, -1.02573, -1.35065]], [[1.35065, 0.5, -1.02573], [0.5, -1.02573, -1.35065], [0.5, 1.02573, -1.35065]], [[-1.02573, -1.35065, -0.5], [-1.35065, -0.5, -1.02573], [-0.5, -1.02573, -1.35065]], [[-1.35065, 0.5, 1.02573], [-1.35065, -0.5, 1.02573], [-0.5, -1.02573, 1.35065]], [[-1.35065, 0.5, 1.02573], [-0.5, -1.02573, 1.35065], [-0.5, 1.02573, 1.35065]], [[-1.35065, 0.5, 1.02573], [-0.5, 1.02573, 1.35065], [-1.02573, 1.35065, 0.5]], [[-1.35065, 0.5, -1.02573], [-1.02573, 1.35065, -0.5], [-0.5, 1.02573, -1.35065]], [[-1.35065, 0.5, -1.02573], [-0.5, 1.02573, -1.35065], [-0.5, -1.02573, -1.35065]], [[-1.35065, 0.5, -1.02573], [-0.5, -1.02573, -1.35065], [-1.35065, -0.5, -1.02573]], [[-1.35065, 0.5, -1.02573], [-1.35065, -0.5, -1.02573], [-1.35065, -0.5, 1.02573]], [[-1.35065, 0.5, -1.02573], [-1.35065, -0.5, 1.02573], [-1.35065, 0.5, 1.02573]], [[-1.35065, 0.5, -1.02573], [-1.35065, 0.5, 1.02573], [-1.02573, 1.35065, 0.5]], [[-1.35065, 0.5, -1.02573], [-1.02573, 1.35065, 0.5], [-1.02573, 1.35065, -0.5]], [[1.02573, 1.35065, -0.5], [1.02573, 1.35065, 0.5], [1.35065, 0.5, 1.02573]], [[1.02573, 1.35065, -0.5], [1.35065, 0.5, 1.02573], [1.35065, 0.5, -1.02573]], [[1.02573, 1.35065, -0.5], [1.35065, 0.5, -1.02573], [0.5, 1.02573, -1.35065]], [[1.02573, 1.35065, -0.5], [0.5, 1.02573, -1.35065], [-0.5, 1.02573, -1.35065]], [[1.02573, 1.35065, -0.5], [-0.5, 1.02573, -1.35065], [-1.02573, 1.35065, -0.5]], [[1.02573, 1.35065, -0.5], [-1.02573, 1.35065, -0.5], [-1.02573, 1.35065, 0.5]], [[1.02573, 1.35065, -0.5], [-1.02573, 1.35065, 0.5], [1.02573, 1.35065, 0.5]], [[0.5, 1.02573, 1.35065], [-0.5, 1.02573, 1.35065], [-0.5, -1.02573, 1.35065]], [[0.5, 1.02573, 1.35065], [-0.5, -1.02573, 1.35065], [0.5, -1.02573, 1.35065]], [[0.5, 1.02573, 1.35065], [1.35065, 0.5, 1.02573], [1.02573, 1.35065, 0.5]], [[0.5, 1.02573, 1.35065], [1.02573, 1.35065, 0.5], [-1.02573, 1.35065, 0.5]], [[0.5, 1.02573, 1.35065], [-1.02573, 1.35065, 0.5], [-0.5, 1.02573, 1.35065]], [[1.02573, -1.35065, -0.5], [-1.02573, -1.35065, -0.5], [-0.5, -1.02573, -1.35065]], [[1.02573, -1.35065, -0.5], [-0.5, -1.02573, -1.35065], [0.5, -1.02573, -1.35065]], [[1.02573, -1.35065, -0.5], [0.5, -1.02573, -1.35065], [1.35065, -0.5, -1.02573]], [[-1.02573, -1.35065, 0.5], [-0.5, -1.02573, 1.35065], [-1.35065, -0.5, 1.02573]], [[-1.02573, -1.35065, 0.5], [-1.35065, -0.5, 1.02573], [-1.35065, -0.5, -1.02573]], [[-1.02573, -1.35065, 0.5], [-1.35065, -0.5, -1.02573], [-1.02573, -1.35065, -0.5]], [[-1.02573, -1.35065, 0.5], [-1.02573, -1.35065, -0.5], [1.02573, -1.35065, -0.5]], [[-1.02573, -1.35065, 0.5], [1.02573, -1.35065, -0.5], [1.02573, -1.35065, 0.5]], [[-1.02573, -1.35065, 0.5], [1.02573, -1.35065, 0.5], [0.5, -1.02573, 1.35065]], [[-1.02573, -1.35065, 0.5], [0.5, -1.02573, 1.35065], [-0.5, -1.02573, 1.35065]], [[1.35065, -0.5, 1.02573], [1.35065, 0.5, 1.02573], [0.5, 1.02573, 1.35065]], [[1.35065, -0.5, 1.02573], [0.5, 1.02573, 1.35065], [0.5, -1.02573, 1.35065]], [[1.35065, -0.5, 1.02573], [0.5, -1.02573, 1.35065], [1.02573, -1.35065, 0.5]], [[1.35065, -0.5, 1.02573], [1.02573, -1.35065, 0.5], [1.02573, -1.35065, -0.5]], [[1.35065, -0.5, 1.02573], [1.02573, -1.35065, -0.5], [1.35065, -0.5, -1.02573]], [[1.35065, -0.5, 1.02573], [1.35065, -0.5, -1.02573], [1.35065, 0.5, -1.02573]], [[1.35065, -0.5, 1.02573], [1.35065, 0.5, -1.02573], [1.35065, 0.5, 1.02573]]]);
  t.true(isWatertightPolygons(polygons));
});
