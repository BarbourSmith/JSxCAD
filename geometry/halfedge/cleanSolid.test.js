import { Solid } from './types';
import { canonicalize as canonicalizeSurface } from '@jsxcad/geometry-surface';
import cleanSolid from './cleanSolid';
import { createNormalize3 } from '@jsxcad/algorithm-quantize';
import test from 'ava';

/**
 * canonicalize
 *
 * @param {Solid} solid
 * @returns {Solid}
 */
export const canonicalize = (solid) => solid.map(canonicalizeSurface);

/*

    [[[5.01,5.01,10 + 1],[-5.01,5.01,10 + 1],[-5.01,-5.01,10]]],
    [[[5.01,10,10],[-5.01,10,10],[-5.01,5.01,10 + 1],[5.01,5.01,10 + 1]]],

Why isn't

[5.01,5.01,10],[-5.01,5.01,10]
merging with
[-5.01,5.01,10],[5.01,5.01,10]
?

*/

test('Simple', t => {
  const normalize = createNormalize3();
  const solid = [[[[-10, -10, -10], [-5.01, -10, -10], [-5.01, -10, 10], [-10, -10, 10]], [[5.01, -10, -10], [10, -10, -10], [10, -10, 10], [5.01, -10, 10]], [[-5.01, -10, 10], [-5.01, -10, -10], [5.01, -10, -10], [5.01, -10, 10]]], [[[-10, -10, -10], [-10, -10, 10], [-10, 10, 10], [-10, 10, -10]]], [[[-5.01, 10, -10], [-10, 10, -10], [-10, 10, 10], [-5.01, 10, 10]], [[10, 10, 10], [10, 10, -10], [5.01, 10, -10], [5.01, 10, 10]], [[5.01, 10, -10], [-5.01, 10, -10], [-5.01, 10, 10], [5.01, 10, 10]]], [[[-5.01, -5.01, 10], [-10, -10, 10], [-5.01, -10, 10]], [[-10, -10, 10], [-5.01, -5.01, 10], [-5.01, 5.01, 10], [-5.01, 10, 10], [-10, 10, 10]], [[10, -10, 10], [10, 10, 10], [5.01, 5.01, 10], [5.01, -5.01, 10], [5.01, -10, 10]], [[5.01, 5.01, 10], [10, 10, 10], [5.01, 10, 10]], [[5.01, -10, 10], [5.01, -5.01, 10], [-5.01, -5.01, 10], [-5.01, -10, 10]], [[5.01, 10, 10], [-5.01, 10, 10], [-5.01, 5.01, 10], [5.01, 5.01, 10]], [[5.01, -5.01, 10], [5.01, 5.01, 10], [-5.01, -5.01, 10]], [[-5.01, 5.01, 10], [-5.01, -5.01, 10], [5.01, 5.01, 10]]], [[[-10, -10, -10], [-5.01, -5.01, -10], [-5.01, -10, -10]], [[-5.01, -5.01, -10], [-10, -10, -10], [-10, 10, -10], [-5.01, 10, -10], [-5.01, 5.01, -10], [-5.01, 5, -10]], [[5.01, 5.01, -10], [10, 10, -10], [10, -10, -10], [5.01, -10, -10], [5.01, -5.01, -10]], [[5.01, 10, -10], [10, 10, -10], [5.01, 5.01, -10]], [[5.01, -10, -10], [-5.01, -10, -10], [-5.01, -5.01, -10], [5, -5.01, -10], [5.01, -5.01, -10]], [[-5.01, 5.01, -10], [-5.01, 10, -10], [5.01, 10, -10], [5.01, 5.01, -10], [5, 5.01, -10]], [[5.01, -5.01, -10], [5, -5.01, -10], [5, 5, -10], [5.01, 5.01, -10]], [[5.01, 5.01, -10], [5, 5, -10], [5, 5.01, -10]], [[5, 5.01, -10], [5, 5, -10], [-5.01, 5, -10], [-5.01, 5.01, -10]], [[5, -5.01, -10], [-5.01, -5.01, -10], [5, 5, -10]], [[5, 5, -10], [-5.01, -5.01, -10], [-5.01, 5, -10]]], [[[10, 10, -10], [10, 10, 10], [10, -10, 10], [10, -10, -10]]]];
  const clean = cleanSolid(solid, normalize);
  console.log(`QQ/clean: ${JSON.stringify(clean)}`);
  t.deepEqual(clean,
              [[[[10, 10, 10], [10, 10, -10], [5.01, 10, -10], [5.01, 10, -10], [-5.01, 10, -10], [-5.01, 10, -10], [-10, 10, -10], [-10, 10, 10], [-5.01, 10, 10], [-5.01, 10, 10], [5.01, 10, 10], [5.01, 10, 10]]],
               [[[10, 10, 10], [10, -10, 10], [10, -10, -10], [10, 10, -10]]],
               [[[-10, 10, 10], [-10, -10, 10], [-10, -10, 10], [-5.01, -10, 10], [-5.01, -10, 10], [5.01, -10, 10], [5.01, -10, 10], [10, -10, 10], [10, 10, 10], [10, 10, 10], [5.01, 10, 10], [5.01, 10, 10], [-5.01, 10, 10], [-5.01, 10, 10]]],
               [[[-10, 10, -10], [-10, -10, -10], [-10, -10, 10], [-10, 10, 10]]],
               [[[10, -10, -10], [5.01, -10, -10], [5.01, -10, -10], [-5.01, -10, -10], [-5.01, -10, -10], [-10, -10, -10], [-10, -10, -10], [-10, 10, -10], [-5.01, 10, -10], [-5.01, 10, -10], [5.01, 10, -10], [5.01, 10, -10], [10, 10, -10], [10, 10, -10]]],
               [[[5.01, -10, -10], [5.01, -10, -10], [10, -10, -10], [10, -10, 10], [5.01, -10, 10], [5.01, -10, 10], [-5.01, -10, 10], [-5.01, -10, 10], [-10, -10, 10], [-10, -10, -10], [-5.01, -10, -10], [-5.01, -10, -10]]]]);
});
