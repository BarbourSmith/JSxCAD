=====

Undefined is incompatible with number.
-----
can't initialize variable x of type number with value of type undefined
-----
/test/a.js
~~~~~
/** @type {number} */
let x;

=====

Undefined is incompatible with string.
-----
can't initialize variable x of type string with value of type undefined
-----
/test/a.js
~~~~~
/** @type {string} */
let x;

=====

Array elements are correctly inferred
-----
-----
/test/a.js
~~~~~
/** @type {function(points:vec3[]):*} */
export const a = (points) => {
  /** @type {vec3} */
  const p1 = points[0];
  return p1;
};

=====

Types can be traced through indirect exports.
-----
-----
/test/a.js
~~~~~
import { c } from '/test/b.js';

/** @type {function():A} */
const a = c();
-----
/test/b.js
~~~~~
export { c } from '/test/c.js';
-----
/test/c.js
~~~~~
/** @type {function(*):?} */
export const c = (x) => x;

=====

Elements are inferred correctly in for..of
-----
-----
/test/a.js
~~~~~
/** @type {function(a:number):number} */
const f = a => a;

/** @type {number[]} */
const R = [1, 2, 3];
for (const Q of R) {
  f(Q);
}
=====
Inline comments are included.
-----
can't initialize variable a = 'ten' of type number with value of type string
-----
/test/a.js
~~~~~
const /** number */ a = 'ten';
=====
Destructuring.
-----
-----
/test/a.js
~~~~~
/** @type {function():string} */
const toRgbIntFromName = () => {
  const { /** string */ name } = colors;
  return name;
};
